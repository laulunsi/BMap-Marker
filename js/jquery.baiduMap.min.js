!
function(t, d) {
	var n = function(t, d) {
			this.init(t, d)
		};
	n.prototype = {
		init: function(n, d) {
			var i = {
				id: "",
				point: {
					lng: 0,
					lat: 0
				},
				type: ["地图", "卫星", "三维"],
				level: 13,
				zoom: true,
				width: 0,
				height: 0,
				icon: {
					url: "img/pos.png",
					width: 36,
					height: 36
				}
			};
			if (this.opts = t.extend({}, i, n), !this.opts.id) throw "id不能为空";
			this.markerArr = d;
			this.renderMap()
		},
		renderMap: function() {
			var t = this.opts,
				n = t.id,
				i = t.level || 15,
				o = this.map = new BMap.Map(n),
				e = new BMap.Point(t.point.lng, t.point.lat);
			o.centerAndZoom(e, i), this.addControl()
		},
		addControl: function() {
			var t = this.opts,
				n = this.map,
				i = t.type,
				o = t.zoom;
			//添加向地图中添加缩放控件、向地图中添加比例尺控件、向地图中添加缩略图控件	
			if (n.addControl(new BMap.NavigationControl), n.addControl(new BMap.ScaleControl), n.addControl(new BMap.OverviewMapControl), o && n.enableScrollWheelZoom(!0), i.length > 0) {
				var e = this.getMapType(i);
				n.addControl(new BMap.MapTypeControl({
					mapTypes: e
				}))
			}
			this.createMarker()
		},
		getMapType: function(n) {
			var i = [],
				o = {
					"地图": BMAP_NORMAL_MAP,
					"卫星": BMAP_SATELLITE_MAP,
					"三维": BMAP_PERSPECTIVE_MAP
				};
			return t.each(n, function(t, n) {
				n in o && i.push(o[n])
			}), i
		},
		createMarker: function() {
			var t=this,
				n = this.map,
				e = this.opts.icon;
				this.point = new Array(); //存放标注点经纬信息的数组
                this.marker = new Array(); //存放标注点对象的数组
                this.infoWindow = new Array();
                for (var i = 0,len=this.markerArr.length; i < len; i++) {
                    // var p0 = markerArr[i].point.split(",")[0];
                    this.point[i] = new window.BMap.Point(this.markerArr[i].point.lng, this.markerArr[i].point.lat); //循环生成新的地图点
                    this.marker[i] = new window.BMap.Marker(this.point[i]); //按照地图点坐标生成标记
                    e && e.url && (this.marker[i] = new window.BMap.Marker(this.point[i], {icon: new BMap.Icon(e.url, new BMap.Size(e.width, e.height))}))
                    n.addOverlay(this.marker[i]);
                    //marker[i].setAnimation(BMAP_ANIMATION_BOUNCE); //跳动的动画
                    //固定名称展示
                    //var label = new window.BMap.Label(markerArr[i].title, { offset: new window.BMap.Size(20, -10) });
                    //marker[i].setLabel(label);
                    t.renderInfoWindow(i);
                }
		},
		renderInfoWindow: function(i) {
			var n = this.markerArr[i],
				j = this.markerArr[i].content.text,
				o = "",
                tn = this,
                tni = this.infoWindow;
			j.length > 0 && t.each(j, function(t, j) {
				o += '<div class="' + n.content.className + '">' + j + "</div>"
			});
            tni[i] = new BMap.InfoWindow(o, {
				width: this.opts.width || 0,
				height: this.opts.height || 0,
				title: '<div class="' + n.title.className + '">' + n.title.text + "</div>"
			});
            this.marker[i].addEventListener("click", function() {
                this.openInfoWindow(tni[i]);//注意此时this指向--括号中不能使用this.infoWindow[i]
            });
            //tni[i].isOpen() || this.map.openInfoWindow(tni[i], this.point[i])
		}
	}, window.BaiduMap = n
}(jQuery);